{"version":3,"sources":["components/Header.js","components/NavBar.js","components/Images.js","components/ImageContainer.js","App.js","serviceWorker.js","index.js","pics.js"],"names":["Header","className","NavBar","props","gameState","score","highScore","Images","onClick","handleClick","alt","id","src","image","ImageContainer","children","App","state","pix","guessedPics","isUnique","includes","this","shuffledPics","getShuffledArray","push","setState","window","alert","array","picsArray","i","length","j","Math","floor","random","console","log","map","pic","key","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8a5823ab.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n\n        </header>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\nfunction NavBar(props) {\n    return (\n        <div className=\"nav col-sm bg-info text-center\">\n\n            <div className=\"col-sm-4\">\n            \n                <div className=\"nav-item h3\">\n                    Clicky Game\n                </div>\n\n            </div>\n\n            <div className=\"col-sm-4 h1\">\n            \n                <div className=\"nav-item\">\n                    {props.gameState}\n                </div>\n\n            </div>\n\n            <div className=\"col-sm-4 h3\">\n            \n                <div className=\"nav-item\">\n                    Score: {props.score} | Top Score: {props.highScore}\n                </div>\n\n            </div>\n\n        </div>\n    )\n};\n\nexport default NavBar;","import React from \"react\";\n\n\nfunction Images(props) {\n    return (\n\n        <div className=\"card col-sm-3\"  onClick={props.handleClick}>\n\n            <div className=\"card-body pic-container\">\n\n                <img className=\"pictures\" alt={props.id} src={props.image} />\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default Images;","import React from \"react\";\n\nfunction ImageContainer(props) {\n    return (\n\n        <div className=\"image-container container w-75\">\n\n            <div className=\"row col-sm\">\n\n                {props.children}\n\n            </div>\n\n        </div>\n\n    );\n};\n\nexport default ImageContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport NavBar from './components/NavBar';\nimport Images from './components/Images';\nimport ImageContainer from './components/ImageContainer';\n// import Modal from 'react-modal';\nimport pix from \"./pics\";\n\nclass App extends Component {\n\n  state = {\n    pix,\n    guessedPics: [],\n    gameState: \"Don't select the same image!\",\n    score: 0,\n    highScore: 0,\n    // modalIsOpen: false,\n    // showModal: false,\n    // handleOpenModal: this.handleOpenModal.bind(this),\n    // handleCloseModal: this.handleCloseModal.bind(this)\n  };\n  \n  // constructor () {\n  //   super();\n  //   this.state = {\n  //     showModal: false\n  //   };\n    \n  //   this.handleOpenModal = this.handleOpenModal.bind(this);\n  //   this.handleCloseModal = this.handleCloseModal.bind(this);\n  // }\n\n  // openModal() {\n  //   this.setState({modalIsOpen: true});\n  // }\n \n  // afterOpenModal() {\n  //   // references are now sync'd and can be accessed.\n  //   this.subtitle.style.color = '#f00';\n  // }\n\n  // closeModal() {\n  //   this.setState({modalIsOpen: false});\n  // }\n\n  isUnique = (id) => {\n    return !this.state.guessedPics.includes(id);\n  }\n\n  handleClick(id) {\n    let score;\n    let guessedPics;\n    let highScore;\n    if (!this.isUnique(id)) {\n      score = 0;\n      guessedPics = [];\n      this.setState({score, guessedPics});\n      window.alert(\"GAME OVER!!!!!!!\");\n        \n    } else {\n      const shuffledPics = this.getShuffledArray(this.state.pix); //add these to setState later...\n      score = this.state.score + 1;\n      guessedPics = this.state.guessedPics;\n      highScore = this.state.highScore;\n      \n      //update highScore if needed\n      if (score > highScore) {\n        highScore = score;\n      }\n      //add to our guessedPics array of id's\n      guessedPics.push(id);\n\n      //finally, setState:\n      this.setState({pix: shuffledPics, score, guessedPics, highScore})\n    }\n    // if(this.state.score === 12) {\n    //   score = 0;\n    //   guessedPics = [];\n    //   highScore = 0;\n    //   this.setState({score, guessedPics, highScore});\n    //   window.alert(\"You win! Play again!\");\n    // }\n  }\n\n  getShuffledArray(array) {\n      let picsArray = array;\n      for (let i = picsArray.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [picsArray[i], picsArray[j]] = [picsArray[j], picsArray[i]];\n      }\n\n      return picsArray;\n  }\n\n  render(){\n    console.log(this.state.guessedPics)\n    return (\n\n      <div>\n      \n        <NavBar\n        \n        gameState = {this.state.gameState}\n        score = {this.state.score}\n        highScore = {this.state.highScore}\n\n        />\n\n        <Header />\n        \n        <ImageContainer>\n\n          {this.state.pix.map(pic => (\n            <Images \n              handleClick = {() => this.handleClick(pic.id)}\n              id = {pic.id}\n              image = {pic.image}\n              key = {pic.id}\n            />\n\n          ))}\n\n        </ImageContainer>\n\n        {/* <button onClick={this.openModal}>Open Modal</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          contentLabel=\"Example Modal\"\n        >\n \n          <h2 ref={subtitle => this.subtitle = subtitle}>Hello</h2>\n          <button onClick={this.closeModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal> */}\n\n      </div>\n\n    );\n  }\n}\n// map through state\n// you want to return an <Images/> component for each \"mapping\"\n// inside of returned component you want to have a \"key\" and you want to have you \"id\" \"src\"\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","let pix = [\n    {\n        id: 1,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/1/17/Bugs_Bunny.svg/800px-Bugs_Bunny.svg.png\"\n    },\n    {\n        id: 2,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/f4/Daffy_Duck.svg/800px-Daffy_Duck.svg.png\"\n    },\n    {\n        id: 3,\n        image: \"https://upload.wikimedia.org/wikipedia/en/6/66/ElmerFudd.gif\"\n    },\n    {\n        id: 4,\n        image: \"https://upload.wikimedia.org/wikipedia/en/a/a0/Foghorn_Leghorn.png\"\n    },\n    {\n        id: 5,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/9/9a/Pep%C3%A9_Le_Pew.svg/800px-Pep%C3%A9_Le_Pew.svg.png\"\n    },\n    {\n        id: 6,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/d/d5/Marvin_the_Martian.svg/800px-Marvin_the_Martian.svg.png\"\n    },\n    {\n        id: 7,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fe/Speedy_Gonzales.svg/800px-Speedy_Gonzales.svg.png\"\n    },\n    {\n        id: 8,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/8/82/Sylvester_the_Cat.svg/800px-Sylvester_the_Cat.svg.png\"\n    },\n    {\n        id: 9,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/c/c4/Taz-Looney_Tunes.svg/800px-Taz-Looney_Tunes.svg.png\"\n    },\n    {\n        id: 10,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/0/02/Tweety.svg/800px-Tweety.svg.png\"\n    },{\n        id: 11,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/8/88/Porky_Pig.svg/800px-Porky_Pig.svg.png\"\n    },\n    {\n        id: 12,\n        image: \"https://upload.wikimedia.org/wikipedia/en/thumb/2/2d/Yosemite_Sam.svg/800px-Yosemite_Sam.svg.png\"\n    }\n]\nmodule.exports = pix; "],"sourceRoot":""}